# config.yaml (Simplified - Topic redefined as Regulation Category)
# Schema and Normalization for Corporate Regulations KG

# LightRAG 知识图谱提取配置文件

# 图谱模式定义
schema:
  # Entity types: Focused on structure, actors, and core content categorization
  entity_types:
    # Structural
    - Document
    - Section
    # Key Actors
    - Organization
    - Role
    # Core Content & Categorization
    - Statement       # (What rule/req/def/goal?)
    - Topic           # (What predefined category/type of regulation?)

  entity_types_llm:
    - Document
    - Section
    - Organization
    - Role
    - Statement
    - Topic
  
  all_entity_types:
    - Document
    - Section
    - Organization
    - Role
    - Statement
    - Topic

  # Mapping to Cypher labels
  entity_type_map_cypher:
    Document: Document
    Section: Section
    Organization: Organization
    Role: Role
    Statement: Statement
    Topic: Topic # Represents the pre-defined category of the regulation

  # Relation types: Focused on structure, responsibility, and core links
  relation_types:
    # 结构化关系
    - HAS_SECTION     # (Document -> Section)
    - HAS_PARENT_SECTION # (Section -> Section)
    - CONTAINS        # (Section -> Statement/Organization/Role/Topic)

    # 语义关系
    # 职责和归属
    - RESPONSIBLE_FOR # (Organization/Role -> Statement/Topic) # Responsibility for a rule or a category of rules
    - BELONGS_TO      # (Organization/Role -> Organization/Role)

    # 内容关系
    - HAS_PURPOSE     # (Statement -> Statement[type=Goal])
    - REFERENCES      # (Statement/Document/Section -> Section)
    - MENTIONS        # (Section -> Topic) # Section mentions rules of a certain category
    - APPLIES_TO      # (Statement -> Organization/Role)

    # 文档关系
    - HAS_VERSION     # (Document -> Document)

    # 通用关系
    - RELATED_TO      # (Entity -> Entity)

  relation_types_llm:
    - HAS_SECTION
    - HAS_PARENT_SECTION
    - CONTAINS
    - RESPONSIBLE_FOR
    - BELONGS_TO
    - HAS_PURPOSE
    - REFERENCES
    - MENTIONS
    - APPLIES_TO
    - HAS_VERSION
    - RELATED_TO
  
  all_relation_types:
    - HAS_SECTION
    - HAS_PARENT_SECTION
    - CONTAINS
    - RESPONSIBLE_FOR
    - BELONGS_TO
    - HAS_PURPOSE
    - REFERENCES
    - MENTIONS
    - APPLIES_TO
    - HAS_VERSION
    - RELATED_TO
    
  # Mapping to Cypher relationship types
  relation_type_map_cypher:
    HAS_SECTION: HAS_SECTION
    HAS_PARENT_SECTION: HAS_PARENT_SECTION
    CONTAINS: CONTAINS
    RESPONSIBLE_FOR: RESPONSIBLE_FOR
    BELONGS_TO: BELONGS_TO
    HAS_PURPOSE: HAS_PURPOSE
    REFERENCES: REFERENCES
    MENTIONS: MENTIONS
    APPLIES_TO: APPLIES_TO
    HAS_VERSION: HAS_VERSION
    RELATED_TO: RELATED_TO

normalization:
  # (保持不变)
  canonical_map:
    客运部: 集团公司客运部
    信息技术所: 集团公司信息技术所
    科信部: 集团公司科信部
    财务部: 集团公司财务部
    计统部: 集团公司计统部
    电务部: 集团公司电务部
    供电部: 集团公司供电部
    宣传部: 集团公司宣传部
    调度所: 集团公司调度所
    集团公司应急领导小组办公室: 集团公司应急领导小组办公室
    集团公司应急领导小组: 集团公司应急领导小组
    国铁集团应急领导小组办公室: 国铁集团应急领导小组办公室
    国铁集团应急领导小组: 国铁集团应急领导小组
    国铁集团客运部: 国铁集团客运部
    12306科创中心: 12306科创中心
    广铁集团: 中国铁路广州局集团有限公司
    集团公司: 中国铁路广州局集团有限公司
    本预案: 《广州局集团公司客票发售和预订系统（含互联网售票部分）应急预案》
    客票系统: 客票发售和预订系统
    # --- 新增Topic相关的标准化（如果需要） ---
    旅客候车: 旅客候车规范
    人身安全: 乘车人身安全
    # ... (根据实际情况扩展)

# Prompt 模板配置 (Topic redefined)
prompts:
  entity_extraction:
    definitions: |
      实体类型定义 (请在返回结果中使用括号中的英文类型名称):
      - Document (文档)：管理规定的文件名称，如《应急预案》。提取完整的文档标题，包括文号。
      - Section (章节)：文档中的具体章节标题，如"1 总则"、"2.3 应急响应"等。
      - Topic (主题/规定类型)：指管理规定所属的**预定义分类或类型**，用于标识规则内容的性质。请识别文本中明确提及的、代表这些分类的术语。例如：'旅客候车'、'乘车人身安全'、'劳动安全'、'服务质量'、'工作流程'、'考核标准'等。 如果文本中没有明确提及这些分类术语，则不提取Topic。
      - Role (角色)：指代具有特定职责的职位或岗位，如"客运部主任"、"值班负责人"。注意与组织区分。
      - Organization (组织)：涉及的单位、部门或公司，如"中国铁路广州局集团有限公司"、"集团公司客运部"、"信息技术所"、"各车务站段"。
      - Statement (陈述)：规则、要求、定义、标准、目标或条件的明确说明，如"本预案适用于集团公司及所属各客运单位相关工作"、"各单位应明确职责分工"、"应保持站台清洁"。这是具体的规定内容。

    template: |
      请从以下文本中提取定义的实体类型。尽可能完整提取每个实体，确保不遗漏文本中的关键实体。

      {definitions}

      预定义的实体类型列表: {entity_types} # 包含 Topic

      文档信息：
      文档标题: {document_title}
      当前章节: {current_heading}
      章节路径: {section_path}
      父章节内容摘要: {parent_section_summary}

      文本：
      """
      {content}
      """

      【重要】：必须使用英文实体类型！返回的JSON中，实体类型必须为英文，绝对不要使用中文实体类型。

      请以严格的 JSON 格式输出，包含一个名为 "entities" 的列表，其中每个对象包含 "name" (实体名称) 和 "type" (实体类型)。确保实体名称是文本中实际出现的词语。

      注意事项：
      1. 确保每个实体完整识别。
      2. 识别实体时考虑缩写和全称。
      3. 保留相同实体的不同表述。
      4. 确保每个实体都准确分配了正确的英文实体类型。
      5. 严格使用以下英文类型名：Document, Section, Organization, Role, Statement, Topic
      6. 类型区分指南：
         - **Topic与Statement的区别**：Topic是规定内容的**分类标签**（如"服务质量"、"劳动安全"），通常是名词短语，代表一种规定类型。Statement是**具体的规定本身**（如"应使用规范用语"、"必须佩戴安全帽"），通常是一个完整的句子或条款。**只有当文本明确提到分类名称时才提取Topic。**
         - Organization与Role的区别：Organization是部门/单位，Role是岗位/职责。
      7. 利用文档上下文信息辅助判断。

      例如 (假设文本中包含 '服务质量' 这个词):
      {
        "entities": [
          {"name": "集团公司客运部", "type": "Organization"},
          {"name": "《服务质量管理办法》", "type": "Document"},
          {"name": "应使用规范用语，保持微笑服务", "type": "Statement"},
          {"name": "服务质量", "type": "Topic"}, # 提取了明确提及的分类术语
          {"name": "站务员", "type": "Role"},
          {"name": "3.1 基本要求", "type": "Section"}
        ]
      }

  relation_extraction:
    definitions: |
      关系类型定义 (请在返回结果中使用括号中的英文关系类型):
      # 结构化关系
      - HAS_SECTION (包含章节): 文档包含的章节。 (Document -> Section)
      - HAS_PARENT_SECTION (父章节): 章节的父子关系。 (Section -> Section)
      - CONTAINS (包含): 章节包含的核心实体，包括规则陈述(Statement)、涉及的组织(Organization)、角色(Role)或提及的规定类型(Topic)。 (Section -> Statement/Organization/Role/Topic)

      # 语义关系
      # 组织和职责关系
      - BELONGS_TO (隶属关系): 指明组织或角色的归属。 (Organization/Role -> Organization/Role)
      - RESPONSIBLE_FOR (责任): 明确组织或角色对某项具体规定(Statement)或某一类规定(Topic)的职责。 (Organization/Role -> Statement/Topic)

      # 文档和内容关系
      - HAS_VERSION (版本关系): 指明文档的版本信息。 (Document -> Document)
      - REFERENCES (引用): 明确引用某章节。 (Statement/Document/Section -> Section)
      - MENTIONS (提及): 章节中明确提及某规定类型(Topic)。 (Section -> Topic)
      - APPLIES_TO (适用于): 规则(Statement)适用的组织或角色。 (Statement -> Organization/Role)
      - HAS_PURPOSE (目的): 陈述的目的。 (Statement -> Statement)

      # 通用关系
      - RELATED_TO (关联): 连接实体间的其他关联。 (Entity -> Entity)

    template: |
      请从以下文本中，根据预定义的实体列表，提取这些实体之间符合定义的关系类型。请专注于在文本段落中**直接陈述**的关系。

      {definitions}

      预定义的关系类型列表: {relation_types}
      预定义的实体类型列表: {entity_types} # 包含 Topic

      文档信息：
      文档标题: {document_title}
      当前章节: {current_heading}
      章节路径: {section_path}

      文本：
      """
      {content}
      """

      文本中已识别的实体列表:
      """
      {entities_json}
      """

      【重要】：必须使用英文实体类型和关系类型！

      请以严格的 JSON 格式输出，包含一个名为 "relations" 的列表，其中每个对象必须包含 "source", "source_type", "target", "target_type", "type" 字段。

      注意事项:
      1. 关系必须连接上面实体列表中的实体。
      2. source_type 和 target_type 必须是以下英文类型之一: Document, Section, Organization, Role, Statement, Topic。
      3. 关系类型必须是预定义的英文类型之一。
      4. 关系类型使用指南：
         - CONTAINS：连接章节和其包含的实体，包括提及的 Topic。
         - RESPONSIBLE_FOR：描述对具体规则(Statement)或规则类型(Topic)的责任。
         - MENTIONS：用于连接章节和其明确提及的规定类型(Topic)。

      例如 (基于上面实体提取的例子):
      {
        "relations": [
          {
            "source": "集团公司客运部",
            "source_type": "Organization",
            "target": "服务质量", # 假设客运部负责服务质量相关规定
            "target_type": "Topic",
            "type": "RESPONSIBLE_FOR"
          },
          {
            "source": "应使用规范用语，保持微笑服务",
            "source_type": "Statement",
            "target": "站务员",
            "target_type": "Role",
            "type": "APPLIES_TO"
           },
          {
             "source": "3.1 基本要求",
             "source_type": "Section",
             "target": "服务质量", # 章节中提到了这个分类
             "target_type": "Topic",
             "type": "MENTIONS" # 或者 CONTAINS，取决于你的建模偏好
          },
          {
             "source": "3.1 基本要求", # 章节包含具体的规定
             "source_type": "Section",
             "target": "应使用规范用语，保持微笑服务",
             "target_type": "Statement",
             "type": "CONTAINS"
          }
        ]
      }

# 图数据库配置 (保持不变)
database:
  enable_uniqueness_constraints: true
  enable_relation_metadata: true

# 实现建议：
# 1. (保持不变)
# 2. (保持不变)
# 3. (保持不变)
# 4. Topic 现在代表规定分类，需要文本中明确出现分类术语才能提取。如果分类信息未在文本中明确提及，则不会创建 Topic 节点。可以考虑在 normalization.canonical_map 中添加 Topic 的标准化映射。
