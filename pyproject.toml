[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lightrag-hku"
dynamic = ["version"]
authors = [
    {name = "Zirui Guo"}
]
description = "LightRAG: Simple and Fast Retrieval-Augmented Generation with WorldClass RAG Extensions"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Original LightRAG dependencies
    "aiohttp",
    "configparser",
    "dotenv",
    "future",
    "json-repair",
    "nano-vectordb",
    "networkx",
    "numpy",
    "ollama",
    "openai",
    "tenacity",
    "tiktoken",
    
    # WorldClass RAG extensions
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typing-extensions>=4.8.0",
    "sentence-transformers>=2.2.2",
    "chromadb>=0.4.18",
    "faiss-cpu>=1.7.4",
    "pypdf>=3.17.0",
    "pillow>=10.1.0",
    "python-magic>=0.4.27",
    "scikit-learn>=1.3.0",
    "nltk>=3.8.1",
    "rank-bm25>=0.2.2",
    "beautifulsoup4>=4.12.0",
    "markdown>=3.5.0",
    "pyyaml>=6.0.1",
    "requests>=2.31.0",
    "aiofiles>=23.2.1",
]

[project.optional-dependencies]
api = [
    "fastapi",
    "uvicorn",
    "pydantic-settings",
    "python-multipart",
    "streamlit",
    "colorama",
    "psutil",
]

# WorldClass RAG specific optional dependencies
worldclass-full = [
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
    "tabula-py>=2.8.2",
    "camelot-py[cv]>=0.11.0",
    "spacy>=3.7.0",
    "textstat>=0.7.3",
    "langdetect>=1.0.9",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "xlrd>=2.0.1",
    "python-pptx>=0.6.23",
]

# Security and compliance dependencies
enterprise = [
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "authlib>=1.2.1",
    "redis>=5.0.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

# Development dependencies  
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/HKUDS/LightRAG"
Repository = "https://github.com/HKUDS/LightRAG"
Issues = "https://github.com/HKUDS/LightRAG/issues"
Documentation = "https://github.com/HKUDS/LightRAG/blob/main/README.md"
"WorldClass RAG" = "https://github.com/HKUDS/LightRAG/tree/genspark_ai_developer"

[project.scripts]
lightrag-server = "lightrag_webui.main:start_server"
worldclass-rag = "worldclass_rag.cli:main"

[tool.setuptools.dynamic]
version = {attr = "lightrag.__version__"}

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*", "examples*", "docs*", "assets*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yaml", "*.yml", "*.json", "*.toml"]

# WorldClass RAG package data
"worldclass_rag" = ["config/*.yaml", "templates/*.jinja2"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lightrag", "worldclass_rag"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "nano_vectordb.*",
    "ollama.*",
    "tiktoken.*",
    "sentence_transformers.*",
    "chromadb.*",
    "faiss.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests", "src/worldclass_rag/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--cov=lightrag --cov=worldclass_rag --cov-report=html --cov-report=term-missing"